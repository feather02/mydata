// i need to add role based access control in my library management system project using Spring Boot and Spring Security
My requirements are:
1. Spring Security will automatically create a login form, but i dont want it
2. first index page should open , from that it has 2 different logins - admin and user
3. after admin login admin can access - all
4. after user login, user can access - /viewBooks only and /, /userRegister, /userLogin - before login

Is it possible to do 2 different logins in spring security?
if yes , do it for me!!!
dont merge it, and dont make confusion


//this is wrong , cn you make corrections
//please read line by line, and correct the code according to my needs
@Configuration
public class SecurityConfig {

    @Bean
    public UserDetailsService userDetailsService(UserRepository userRepository) {
        return new CustomUserDetailsService(userRepository);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/", "/userRegister", "/userLogin").permitAll()
                        .requestMatchers("/viewBooks").hasRole("USER")
                        .requestMatchers("/admin/**").hasRole("ADMIN")
                        .anyRequest().authenticated()
                )
                .formLogin(login -> login
                        .loginPage("/userLogin")
                        .defaultSuccessUrl("/viewBooks", true)
                        .permitAll()
                )
                .formLogin(adminLogin -> adminLogin
                        .loginPage("/adminLogin")
                        .defaultSuccessUrl("/admin/dashboard", true)
                        .permitAll()
                )
                .logout(logout -> logout
                        .logoutUrl("/logout")
                        .logoutSuccessUrl("/")
                        .permitAll()
                );

        return http.build();
    }
}

package com.project.library_management_system.controller;

import com.project.library_management_system.model.Books;
import com.project.library_management_system.model.Role;
import com.project.library_management_system.model.User;
import com.project.library_management_system.service.BooksService;
import com.project.library_management_system.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private BooksService booksService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // User Registration Form
    @GetMapping("/userRegister")
    public String userRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "userRegister";
    }

    // Handle User Registration
    @PostMapping("/userRegister")
    public String registerUser(@ModelAttribute("user") User user, RedirectAttributes redirectAttributes) {
        // Hash password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole(Role.ROLE_USER); // Assign default role as USER
        userService.registerUser(user);

        redirectAttributes.addFlashAttribute("successMessage", "User registered successfully! Please log in.");
        return "redirect:/userLogin";
    }

    // User Login Form
    @GetMapping("/userLogin")
    public String userLoginForm(Model model) {
        model.addAttribute("user", new User());
        return "userLogin";
    }

    // View Available Books (Only for Logged-in Users)
    @GetMapping("/viewBooks")
    public String viewBooksPage(Model model) {
        List<Books> allBooks = booksService.getAllBooks();
        model.addAttribute("availablebooks", allBooks);
        return "viewBooks";
    }

    // Check Availability of a Book
    @GetMapping("/isAvailable")
    public String isAvailable(@RequestParam("id") int id) {
        Books book = booksService.getBookById(id);
        boolean check = booksService.isAvailable(book);
        booksService.checkAvailabilty(book, !check);
        return "redirect:/viewBooks";
    }
}


package com.project.library_management_system.service;

import com.project.library_management_system.model.User;
import com.project.library_management_system.repository.UserRepository;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import java.util.Collections;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username);

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority(user.getRole().name()))
        );
    }
}

package com.project.library_management_system.service.Impl;

import com.project.library_management_system.model.User;
import com.project.library_management_system.repository.UserRepository;
import com.project.library_management_system.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.crypto.Cipher;
import javax.crypto.NullCipher;

@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserRepository userRepository;

    //PasswordEncoder is used for hashing the password
    private final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    //Cipher is used for data encryption and decryption like messages, data
//    Cipher cipher = new NullCipher();

    @Override
    public void registerUser(User user) {
       // PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        String encodedPassword = passwordEncoder.encode(user.getPassword()); // Encrypt Password
        user.setPassword(encodedPassword);
        userRepository.save(user);
    }

    public User getUserDetails(User user) {
        return userRepository.findFirstByUsername(user.getUsername())
                .filter(existingUser -> passwordEncoder.matches(user.getPassword(), existingUser.getPassword()))
                .orElse(null);
    }
}


