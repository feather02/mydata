jQuery:

- The purpose of jQuery is to make it much easier to use JavaScript on your website.
- jQuery is a lightweight, "write less, do more", JavaScript library.
- The jQuery library contains the following features:
	HTML/DOM manipulation
	CSS manipulation
	HTML event methods
	Effects and animations
	AJAX
	Utilities
- There are several ways to add jQuery to Your Web Pages :
	Download the jQuery library from jQuery.com
	Include jQuery from a CDN, like Google (CDN - Content Delivery Network)
- The jQuery library is a single JavaScript file, and you reference it with the HTML <script> tag (notice that the <script> tag should be inside the <head> section):
	<head>
		<script src="jquery-3.7.1.min.js"></script>
	</head>

- jQuery CDN
- If you don't want to download and host jQuery yourself, you can include it from a CDN (Content Delivery Network).
- Google CDN:
	<head>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
	</head>

jQuery Syntax
- The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s).
- Basic syntax is: 
	$(selector).action()
   where,
	 $ sign to define/access jQuery
	 (selector) to "query (or find)" HTML elements
	 jQuery action() to be performed on the element(s)
- Ex:
	$("#test").hide() - hides the element with id="test".

The Document Ready Event:
- This is to prevent any jQuery code from running before the document is finished loading (is ready). 
- syntax:
	$(document).ready(function(){
	       // jQuery methods go here...
	});
- even short method 
	$(function(){
	      // jQuery methods go here...
	});

jQuery Selectors
- jQuery selectors allow you to select and manipulate HTML element(s).
- All selectors in jQuery start with the dollar sign and parentheses: $()
1. The element Selector
- The jQuery element selector selects elements based on the element name.
- Syntax:	$("elementName")
- Example:
	$(document).ready(function(){
  	  $("button").click(function(){
   	   $("p").hide();
  	  });
	});
2. The #id Selector
- The jQuery #id selector uses the id attribute of an HTML tag to find the specific element.
- Syntax: $("#id")
3. The .class Selector
- The jQuery .class selector finds elements with a specific class.
- Syntax: $(".className") 
4. Other Selectors
	$("*")		Selects all elements	
	$(this)		Selects the current HTML element	
	$("p.intro")		Selects all <p> elements with class="intro"	
	$("p:first")		Selects the first <p> element	
	$("ul li:first")	Selects the first <li> element of the first <ul>	
	$("ul li:first-child")	Selects the first <li> element of every <ul>	
	$("[href]")		Selects all elements with an href attribute	
	$("a[target='_blank']")	Selects all <a> elements with a target attribute value equal to "_blank"	
	$("a[target!='_blank']")	Selects all <a> elements with a target attribute value NOT equal to "_blank"	
	$(":button")		Selects all <button> elements and <input> elements of type="button"	
	$("tr:even")		Selects all even <tr> elements	
	$("tr:odd")		Selects all odd <tr> elements

- $(:type) -  type value is checked (form type values)
- $([atrributeName]) - attribute selector [ ]

Functions In a Separate File
- Ex: <head>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
	<script src="my_jquery_functions.js"></script>
        </head>

jQuery Event Methods
- All the different visitors' actions that a web page can respond to are called events.
- common DOM events:
	Mouse Events	Keyboard Events	Form Events	Document/Window Events
	click		keypress		submit		load
	dblclick		keydown		change		resize
	mouseenter		keyup		focus		scroll
	mouseleave	 			blur		unload

jQuery Syntax For Event Methods
- In jQuery, most DOM events have an equivalent jQuery method.
- To assign a click event to all paragraphs on a page, you can do this:
- Ex:	$("p").click(function(){
	     // action goes here!!
	});

Commonly Used jQuery Event Methods
1. $(document).ready()
     - The $(document).ready() method allows to execute a function when the document is fully loaded.

2. click()
     - The click() method attaches an event handler function to an HTML element.
     - The function is executed when the user clicks on the HTML element.

3. dblclick()
     - The function is executed when the user double-clicks on the HTML element.

4. mouseenter() - hovering in 
     - The function is executed when the mouse pointer enters the HTML element.

5. mouseleave() - out from hovering
     - The function is executed when the mouse pointer leaves the HTML element.

6. mousedown()
     - The function is executed, when the left, middle or right mouse button is pressed down, while the mouse is over the HTML element.

7. mouseup()
     - The function is executed, when the left, middle or right mouse button is released, while the mouse is over the HTML element.

8. hover()
     - The hover() method takes two functions and is a combination of the mouseenter() and mouseleave() methods.

9. focus()
     - The function is executed when the form field gets focus.

10. blur()
      - The function is executed when the form field loses focus.

11. The on() Method
      - The on() method attaches one or more event handlers for the selected elements.


jQuery Effects
- Hide, Show, Toggle, Slide, Fade, and Animate. 

1. jQuery hide() and show()
     - With jQuery, we can hide and show HTML elements with the hide() and show() methods
     - Syntax:
	$(selector).hide(speed,callback);
	$(selector).show(speed,callback);
     -  optional speed parameter  values: "slow", "fast", or milliseconds.
     - The optional callback parameter is a function to be executed after the hide() or show() method completes.

2. jQuery toggle()
     - toggle between hiding and showing an element with the toggle() method.
     - Shown elements are hidden and hidden elements are shown.
     - Syntax:
	$(selector).toggle(speed,callback);

3. jQuery Fading Methods
    - With jQuery you can fade an element in and out of visibility.
    - fade methods:
	fadeIn()
	fadeOut()
	fadeToggle()
	fadeTo()

fadeIn() Method
- The jQuery fadeIn() method is used to fade in a hidden element.
- Syntax:	$(selector).fadeIn(speed,callback);
fadeOut() Method
- The jQuery fadeOut() method is used to fade out a visible element.
- Syntax:	$(selector).fadeOut(speed,callback);
fadeToggle() Method
- The jQuery fadeToggle() method toggles between the fadeIn() and fadeOut() methods.
- If the elements are faded out, fadeToggle() will fade them in.
- If the elements are faded in, fadeToggle() will fade them out.
- Syntax:	$(selector).fadeToggle(speed,callback);
fadeTo() Method
- The jQuery fadeTo() method allows fading to a given opacity (value between 0 and 1).
- Syntax:	$(selector).fadeTo(speed,opacity,callback);
- In this speed and opacity parameters are required.

4. jQuery Sliding Methods
- With jQuery you can create a sliding effect on elements.
- slide methods:
	slideDown()
	slideUp()
	slideToggle()

slideDown() Method
- The jQuery slideDown() method is used to slide down an element.
- Syntax:	$(selector).slideDown(speed,callback);
slideUp() Method
- The jQuery slideUp() method is used to slide up an element.
- Syntax:	$(selector).slideUp(speed,callback);
slideToggle() Method
- The jQuery slideToggle() method toggles between the slideDown() and slideUp() methods.
- If the elements have been slid down, slideToggle() will slide them up.
- If the elements have been slid up, slideToggle() will slide them down.
- Syntax:	$(selector).slideToggle(speed,callback);


5. jQuery Animations - The animate() Method
- The jQuery animate() method is used to create custom animations.
- Syntax:	$(selector).animate({params},speed,callback);
- The required params parameter defines the CSS properties to be animated.
- By default, all HTML elements have a static position, and cannot be moved.
- To manipulate the position, remember to first set the CSS position property of the element to relative, fixed, or absolute!
- jQuery animate() - Manipulate Multiple Properties - Notice that multiple properties can be animated at the same time.

6. jQuery stop() Method
- The jQuery stop() method is used to stop an animation or effect before it is finished.
- The stop() method works for all jQuery effect functions, including sliding, fading and custom animations.
- Syntax:	$(selector).stop(stopAll,goToEnd);

7. jQuery Callback Functions
- A callback function is executed after the current effect is 100% finished.
- JavaScript statements are executed line by line. However, with effects, the next line of code can be run even though the effect is not finished. This can create errors.
- To prevent this, you can create a callback function.
- A callback function is executed after the current effect is finished.
- Typical syntax: 	$(selector).hide(speed,callback);

8. jQuery - Chaining
- With jQuery, you can chain together actions/methods.
- Chaining allows us to run multiple jQuery methods (on the same element) within a single statement.
- When chaining, the line of code could become quite long. However, jQuery is not very strict on the syntax; you can format it like you want, including line breaks and indentations.


jQuery HTML
1. jQuery - Get Content and Attributes
jQuery DOM Manipulation
- One very important part of jQuery is the possibility to manipulate the DOM.

Get Content - text(), html(), and val()
Three simple, but useful, jQuery methods for DOM manipulation are:
	text() - Sets or returns the text content of selected elements
	html() - Sets or returns the content of selected elements (including HTML markup)
	val() - Sets or returns the value of form fields

Get Attributes - attr()
- The jQuery attr() method is used to get attribute values.
- Ex:	$(document).ready(function(){
	  $("button").click(function(){
	    alert($("#w3s").attr("href"));
	  });
	});

2. jQuery - Set Content and Attributes
Set Content - text(), html(), and val()
Same three methods:
	text() - Sets or returns the text content of selected elements
	html() - Sets or returns the content of selected elements (including HTML markup)
	val() - Sets or returns the value of form fields

A Callback Function for text(), html(), and val()
- All of the three jQuery methods: text(), html(), and val(), also come with a callback function. 
- The callback function has two parameters: the index of the current element in the list of elements selected and the original (old) value. 
- Then we can return the string we wish to use as the new value from the function.
- Ex:	$("#btn1").click(function(){
 	       $("#test1").text(function(i, origText){
 		   return "Old text: " + origText + " New text: Hello world!
 		   (index: " + i + ")";
 	      });
	});

Set Attributes - attr()
- The jQuery attr() method is also used to set/change attribute values.
- Ex:	$("button").click(function(){
	     $("#w3s").attr("href", "https://www.w3schools.com/jquery/");
	});
- The attr() method also allows you to set multiple attributes at the same time.
- Ex:	$("button").click(function(){
	   $("#w3s").attr({
	      "href" : "https://www.w3schools.com/jquery/",
	      "title" : "W3Schools jQuery Tutorial"
	   });
	});

A Callback Function for attr()
- The jQuery method attr(), also comes with a callback function. The callback function has two parameters: the index of the current element in the list of elements selected and the original (old) attribute value.

3. Add New HTML Content
-  four jQuery methods that are used to add new content:
	append() - Inserts content at the end of the selected elements
		Ex:  $("p").append("Some appended text.");
	prepend() - Inserts content at the beginning of the selected elements
		Ex:  $("p").prepend("Some prepended text.");
	after() - Inserts content after the selected elements
	before() - Inserts content before the selected elements

jQuery after() and before() Methods
- The jQuery after() method inserts content AFTER the selected HTML elements.
- The jQuery before() method inserts content BEFORE the selected HTML elements.
Ex:
function afterText() {
  var txt1 = "<b>I </b>";                    // Create element with HTML 
  var txt2 = $("<i></i>").text("love ");     // Create with jQuery
  var txt3 = document.createElement("b");    // Create with DOM
  txt3.innerHTML = "jQuery!";
  $("img").after(txt1, txt2, txt3);          // Insert new elements after <img>
}

4. Remove Elements/Content
- To remove elements and content, there are mainly two jQuery methods:
	remove() - Removes the selected element (and its child elements)
	empty() - Removes the child elements from the selected element

- Filter the Elements to be Removed
- The jQuery remove() method also accepts one parameter, which allows you to filter the elements to be removed.
- Ex: $("p").remove(".test");
- For multiple elements - Ex: $("p").remove(".test, .demo"); 

5. jQuery Manipulating CSS
- jQuery has several methods for CSS manipulation:
	addClass() - Adds one or more classes to the selected elements
	removeClass() - Removes one or more classes from the selected elements
	toggleClass() - Toggles between adding/removing classes from the selected elements
	css() - Sets or returns the style attribute

addClass() Ex:
	$(document).ready(function(){
	  $("button").click(function(){
	    $("h1, h2, p").addClass("blue");
	    $("div").addClass("important");
	  });
	});

add multiple classes - Ex:     $("#div1").addClass("important blue");

removeClass() - Ex:	$("button").click(function(){
		    $("h1, h2, p").removeClass("blue");
		});

6. jQuery css() Method
- The css() method sets or returns one or more style properties for the selected elements.
- To return the value of a specified CSS property, use the following syntax:	css("propertyname");
- Ex: alert("Background color = " + $("p").css("color"))
- Output: Background color = rgb(0, 0, 0)
Set a CSS Property
- To set a specified CSS property, use the following syntax:	css("propertyname","value");
Set Multiple CSS Properties
- To set multiple CSS properties, use the following syntax: css({"propertyname":"value","propertyname":"value",...});

7. jQuery Dimension Methods
- jQuery has several important methods for working with dimensions:
	width()
	height()
	innerWidth()
	innerHeight()
	outerWidth()
	outerHeight()

- The width() method sets or returns the width of an element (excludes padding, border and margin).
- The height() method sets or returns the height of an element (excludes padding, border and margin).
- The innerWidth() method returns the width of an element (includes padding).
- The innerHeight() method returns the height of an element (includes padding).
- The outerWidth() method returns the width of an element (includes padding and border).
- The outerHeight() method returns the height of an element (includes padding and border).
- The outerWidth(true) method returns the width of an element (includes padding, border, and margin).
- The outerHeight(true) method returns the height of an element (includes padding, border, and margin).


jQuery Traversing
What is Traversing?
- jQuery traversing, which means "move through", are used to "find" (or select) HTML elements based on their relation to other elements. 
- Start with one selection and move through that selection until you reach the elements you desire.
- Imagine an HTML page as a tree (DOM tree). With jQuery traversing, you can easily move up (ancestors), down (descendants) and sideways (siblings) in the tree, starting from the selected (current) element. This movement is called traversing - or moving through - the DOM tree.

Note:
- An ancestor is a parent, grandparent, great-grandparent, and so on.
- A descendant is a child, grandchild, great-grandchild, and so on.
- Siblings share the same parent.

1. jQuery Traversing - Ancestors
- With jQuery we can traverse up the DOM tree to find ancestors of an element.
- An ancestor is a parent, grandparent, great-grandparent, and so on.
- Traversing Up the DOM Tree
Three useful jQuery methods for traversing up the DOM tree are:
	parent()
	parents()
	parentsUntil()

jQuery parent() Method
- The parent() method returns the direct parent element of the selected element.
- This method only traverse a single level up the DOM tree.
- Ex: $("span").parent().css("color", "red");
jQuery parents() Method
- The parents() method returns all ancestor elements of the selected element, all the way up to the document's root element (<html>).
- Ex: $("span").parents().css("color", "red");
- We can also use an optional parameter to filter the search for ancestors.
jQuery parentsUntil() Method
- The parentsUntil() method returns all ancestor elements between two given arguments.
- Ex: $("span").parentsUntil("div").css("color", "red");

2. jQuery Traversing - Descendants
- With jQuery you can traverse down the DOM tree to find descendants of an element.
- A descendant is a child, grandchild, great-grandchild, and so on.
- Traversing Down the DOM Tree
Two useful jQuery methods for traversing down the DOM tree are:
	children()
	find()

jQuery children() Method
- The children() method returns all direct children of the selected element.
- This method only traverses a single level down the DOM tree.
- We can also use an optional parameter to filter the search for children.
- Ex: $("div").children().css("color", "red");

jQuery find() Method
- The find() method returns descendant elements of the selected element, all the way down to the last descendant.
- Ex: $("div").find("span").css("color", "red"); //only select span
- Ex: $("div").find("*").css("color", "red"); //select all the descendents of div

3. jQuery Traversing - Siblings
- With jQuery you can traverse sideways in the DOM tree to find siblings of an element.
- Siblings share the same parent. 
- Traversing Sideways in The DOM Tree
There are many useful jQuery methods for traversing sideways in the DOM tree:
	siblings()
	next()
	nextAll()
	nextUntil()
	prev()
	prevAll()
	prevUntil()

jQuery siblings() Method
- The siblings() method returns all sibling elements of the selected element.
- Ex: $("div").siblings().css("color", "red"); //select all siblings of div
- We can also use an optional parameter to filter the search for siblings.
- Ex: $("div").siblings("p").css("color", "red"); //select only p

jQuery next() Method
- The next() method returns the next sibling element of the selected element.
- Ex: $("div").next().css("color", "red"); 

jQuery nextAll() Method
- The nextAll() method returns all next sibling elements of the selected element.
- Ex: $("div").nextAll().css("color", "red"); 

jQuery nextUntil() Method
- The nextUntil() method returns all next sibling elements between two given arguments.
- Ex: $("div").nextUntil().css("color", "red"); 

jQuery prev(), prevAll() & prevUntil() Methods
The prev(), prevAll() and prevUntil() methods work just like the methods above but with reverse functionality: they return previous sibling elements (traverse backwards along sibling elements in the DOM tree, instead of forward).

4. jQuery Traversing - Filtering
The first(), last(), eq(), filter() and not() Methods
- The most basic filtering methods are first(), last() and eq(), which allow you to select a specific element based on its position in a group of elements.
- Other filtering methods, like filter() and not() allow you to select elements that match, or do not match, a certain criteria.

jQuery first() Method
- The first() method returns the first element of the specified elements.
- Ex: $("div").first().css("color", "red"); 

jQuery last() Method
- The last() method returns the last element of the specified elements.
- Ex: $("div").last().css("color", "red"); 

jQuery eq() method
- The eq() method returns an element with a specific index number of the selected elements.
- The index numbers start at 0, so the first element will have the index number 0 and not 1.
- Ex: $("div").eq(1).css("color", "red"); 

jQuery filter() Method
- The filter() method lets you specify a criteria. Elements that do not match the criteria are removed from the selection, and those that match will be returned.
- Ex: $("div").filter(".intro").css("color", "red"); 

jQuery not() Method
- The not() method returns all elements that do not match the criteria.
- The not() method is the opposite of filter().
- Ex: $("div").filter(".intro").css("color", "red"); 




jQuery - AJAX 
- AJAX is the art of exchanging data with a server, and updating parts of a web page - without reloading the whole page.

What is AJAX?
- AJAX = Asynchronous JavaScript and XML.
- In short; AJAX is about loading data in the background and display it on the webpage, without reloading the whole page.
- Examples of applications using AJAX: Gmail, Google Maps, Youtube, and Facebook tabs.

jQuery load() Method
- The jQuery load() method is a simple, but powerful AJAX method.
- The load() method loads data from a server and puts the returned data into the selected element.
- Syntax:	$(selector).load(URL,data,callback);
	The required URL parameter specifies the URL you wish to load.
	The optional data parameter specifies a set of querystring key/value pairs to send along with the request.
	The optional callback parameter is the name of a function to be executed after the load() method is completed.
- It is also possible to add a jQuery selector to the URL parameter.
- Ex: 	$("#div1").load("demo_test.txt #p1");

- The optional callback parameter specifies a callback function to run when the load() method is completed. The callback function can have different parameters:
	responseTxt - contains the resulting content if the call succeeds //html code
	statusTxt - contains the status of the call //status code
	xhr - contains the XMLHttpRequest object //Object object

jQuery - AJAX get() and post() Methods
- The jQuery get() and post() methods are used to request data from the server with an HTTP GET or POST request.

HTTP Request: GET vs. POST
- Two commonly used methods for a request-response between a client and server are: GET and POST.
	GET - Requests data from a specified resource
	POST - Submits data to be processed to a specified resource
- GET is basically used for just getting (retrieving) some data from the server. 
- Note: The GET method may return cached data.
- POST can also be used to get some data from the server. However, the POST method NEVER caches data, and is often used to send data along with the request.

1. jQuery $.get() Method
- The $.get() method requests data from the server with an HTTP GET request.
- Syntax:	$.get(URL,callback);
	The required URL parameter specifies the URL you wish to request.
	The optional callback parameter is the name of a function to be executed if the request succeeds.
- Ex:  $("button").click(function(){	
	  $.get("demo_test.asp", function(data, status){
	    alert("Data: " + data + "\nStatus: " + status);
	  });
         });

2. jQuery $.post() Method
- The $.post() method requests data from the server using an HTTP POST request.
- Syntax:	$.post(URL,data,callback);
	The required URL parameter specifies the URL you wish to request.
	The optional data parameter specifies some data to send along with the request.
	The optional callback parameter is the name of a function to be executed if the request succeeds.
- Ex:  $("button").click(function(){
	  $.post("demo_test_post.asp",
	  {
	    name: "Donald Duck",
	    city: "Duckburg"
	  },
	  function(data, status){
	    alert("Data: " + data + "\nStatus: " + status);
	  });
          });













Learn 
AJAX + Spring Boot
Relationships in Spring Data JPA
Role Based Access Control in Spring Security




